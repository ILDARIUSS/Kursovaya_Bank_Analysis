import pandas as pd
import json
import datetime
import logging
from src.utils import read_excel_transactions
from src.external_api import get_exchange_rate

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def get_financial_summary(transactions: pd.DataFrame):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã, –æ–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç, –∫–µ—à–±—ç–∫).
    """
    summary = transactions.groupby("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã").agg({"–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏": "sum", "–ö—ç—à–±—ç–∫": "sum"}).reset_index()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    summary["–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"] = summary["–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"].fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")  # –ó–∞–º–µ–Ω—è–µ–º NaN
    summary["last_digits"] = summary["–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"].astype(str).str[-4:]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
    summary["cashback"] = summary["–ö—ç—à–±—ç–∫"].fillna(0).round(2)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–µ—à–±—ç–∫ –Ω–µ NaN

    logger.info("üìä –ê–Ω–∞–ª–∏–∑ –∫–µ—à–±—ç–∫–∞:\n%s", summary[["–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ö—ç—à–±—ç–∫"]].head(10))

    return summary[["last_digits", "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "cashback"]].rename(
        columns={"–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏": "total_spent"}
    ).to_dict(orient="records")

def generate_main_page(current_datetime: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    transactions = read_excel_transactions("data/operations.xlsx")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç
    usd_rate = get_exchange_rate("USD")
    eur_rate = get_exchange_rate("EUR")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    hour = datetime.datetime.strptime(current_datetime, "%Y-%m-%d %H:%M:%S").hour
    if hour < 6:
        greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    elif hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif hour < 18:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    else:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"

    return json.dumps({
        "greeting": greeting,
        "cards": get_financial_summary(transactions),
        "top_transactions": transactions.nlargest(5, "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")[["–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ"]].rename(
            columns={"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏": "date", "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏": "amount", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category", "–û–ø–∏—Å–∞–Ω–∏–µ": "description"}
        ).to_dict(orient="records"),
        "currency_rates": [{"currency": "USD", "rate": usd_rate}, {"currency": "EUR", "rate": eur_rate}]
    }, ensure_ascii=False, indent=4)
